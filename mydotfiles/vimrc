"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> Vundle(插件管理工具)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set background=dark
" solarized options
" colorscheme solarized

" Configration section of vundle
set nocompatible                     " be iMproved, required
filetype off                         " required


set rtp+=~/.vim/bundle/Vundle.vim    " Vundle 路径
call vundle#begin()                  " Vundle 开始标志

" 必要的：让Vundle管理Vundle
" required!
Plugin 'gmarik/Vundle.vim'
" Bundle 'altercation/vim-colors-solarized'

Plugin 'Shougo/neocomplete'
"Plugins for golang
Plugin 'fatih/vim-go'

" ==下面是自定义插件
Plugin 'jiangmiao/auto-pairs'

" 目录树
Plugin 'scrooloose/nerdtree'
" 函数变量列表
Plugin 'majutsushi/tagbar'
" 代码注释
Plugin 'tpope/vim-commentary'
" 语法检查
Plugin 'scrooloose/syntastic'
" 文件查找
Plugin 'kien/ctrlp.vim.git'
" tab扩展
Plugin 'ervandew/supertab'
" 文件浏览插件(文件缓存区)
Plugin 'vim-scripts/bufexplorer.zip'
" 最近使用文件列表
Plugin 'vim-scripts/mru.vim'
" 状态栏
Plugin 'Lokaltog/vim-powerline'
" c/c++等语言的插件
"Plugin 'WolfgangMehner/vim-plugins'
" .c/.h文件切换插件
Plugin 'vim-scripts/a.vim.git'
" 保存文件时，自动保存目录
Plugin 'DataWraith/auto_mkdir'
" 书签插件
"Plugin 'MattesGroeger/vim-bookmarks'
" 复制/粘贴工具
Plugin 'vim-scripts/YankRing.vim'
" 内置grep到vim中
Plugin 'yegappan/grep'

"Plugin 'SirVer/ultisnips'


" == plugin from http://vim-scripts.org/vim/scripts.html
" == java 插件
" 打开import 文件
"Plugin 'javaimp.vim'
" java自动补全
"Plugin 'javacomplete'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required




"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 通用配置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number                  " 显示行号
set autoread                " 文件在Vim之外修改过，自动重新读入
set foldenable 

" 搜索
set hlsearch                " 搜索时，高亮显示查找内容
set ignorecase              " 搜索是，忽略大小写
set smartcase               " 如果搜索中有大写字符，忽略 'ignorecase' 选项"

" 语法和高亮
syntax enable
syntax on                   " 开启语法检验

" Tab和空格
set tabstop=4               " 设置Tab键的宽度=等同4个空格
set shiftwidth=4            " 每一级自动缩进的空格数为4个
set expandtab               " 将Tab自动转化成空格(需要输入真正的Tab键时，使用 Ctrl+V+Tab)
set softtabstop=4           " 按退格键时可以一次删掉 4 个空格  

" 缩进
set autoindent              " 自动缩进
set smartindent             " 开启新行时使用智能自动缩进"

" 编码
set encoding=utf-8          " 设置文本编码为utf-8
set fileencodings=utf-8,gb2312,gbk,gb18030,utf-16,utf-32 " 自动判断编码的编码次序
set termencoding=utf-8



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 自定义快捷键
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" F2自动保存
map <F2> :up<CR>
" F3
map <F3> :Grep<CR>
" F4强制关闭窗口
map <F4> :q!<CR>
" F8切换NerdTree
map <F8> :NERDTreeToggle<CR>
" 设置F12为输入模式和粘贴模式的切换键
set pastetoggle=<F12>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => 插件配置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-powerline: 状态栏
set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set t_Co=256       " Explicitly tell Vim that the terminal supports 256 colors

" tagbar: 函数,变量等标签 
filetype on
nmap <Leader>tag :TagbarToggle<CR>

" vim-commentary: 注释代码
autocmd FileType python,sh set commentstring=#\ %s
autocmd FileType java,c,cpp set commentstring=//\ %s
" Usage: (01) gcc to comment 1 line
"        (02) 5gcc to comment 5 line
"        (03) gcu to un-comment 1 line
"        (04) 5gcu to un-comment 5 line

" syntastic: 语法检查
let g:syntastic_check_on_open = 1
let g:syntastic_ignore_files=[".java$"]     " ignore java files
nmap <Leader>check :SyntasticCheck<CR>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" ctrlp: 搜索
let g:ctrlp_map = '<c-p>'
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*    " ignore direcotries
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " ignore files

" delimiteMate: 括号自动补全
autocmd FileType txt let b:loaded_delimitMate = 1 " 对于*.txt文件禁用括号自动补全

" vim-plugin
let  g:C_UseTool_cmake   = 'yes' 
let  g:C_UseTool_doxygen = 'yes' 

" Snippet
let g:UltiSnipsUsePythonVersion = 2

" MRU
nmap <Leader>mru :MRU<CR>

" javaimp
let $JAVASOURCEPATH="$JAVA_HOME/src"
map H :call OpenJavaImport($JAVASOURCEPATH)<CR>

" javacomplete
" Only do this part when compiled with support for autocommands.
" autocmd Filetype java setlocal omnifunc=javacomplete#Complete
" autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo
" autocmd FileType java inoremap <buffer>. .<C-X><C-O><C-P>

" vim-bookmarks快捷键
" 1. mm   Add/Remove bookmark
" 2. mi   Add/Edit/Remove bookmark annotation
" 3. mp   :PrevBookmark
" 4. mn   :Nextookmark
" 5. ma   :ShowAllBookmarks
" 6. mc   :ClearBookmarks
" 7. mx   :ClearAllBookmarks

" YankRing
nmap <Leader>ys :YRShow<CR>
nmap <Leader>yc :YRClear<CR>

" UltiSnips
"let g:UltiSnipsUsePythonVersion = 2
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==> cscope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")

set cscopequickfix=c-,d-,e-,i-,s-,t-
set csprg=/usr/bin/cscope    
set csto=0
set cst
set nocsverb
if filereadable("cscope.out")
    cs add cscope.out
endif
set csverb

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

endif
